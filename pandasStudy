# Pandas
판다스: 빅데이터 분석과 처리에 현재 널리 사용되고 있는 Python 라이브러리

Pandas의 기본 목적: 서로 다른 유형의 데이터를 공통의 형식으로 정리하는 것

판다스는 핵심 데이터 구조로서 1차원 배열 형태를 가진 Series와 2차원 배열 형태를 가진 DataFrame을 제공하며, 이를 통해 빅데이터 분석에 필요한 고수준의 연산 수행을 가능하도록 지원하고 있다.

## pandas의 사용 방법
<pre><code>import pandas as pd </pre></code>
pd라는 이름으로 판다스를 부름

<pre><code> pandas.__version__</pre></code>
버전 정보 확인

###### pandas를 사용하기 위해서는 numpy와 판다스 모두를 임포트해야 한다
<br/>

## Pandas의 기본 데이터 구조: Series, DataFrame

### 시리즈: 데이터가 순차적으로 나열된 1차원 배열의 형태

인덱스와 데이터값과의 일대일 대응 관계는 파이썬 딕셔너리에서 키와 값의 관계와 유사

### 데이터프레임: 2차원 배열 구조

데이터프레임에서 각 열은 시리즈를 의미

이를 열 벡터라 하면 데이터프레임은 여러 개의 열 벡터들이 순서대로 결합된 2차원 행렬로 생각할 수 있음

데이터프레임은 2차원 행렬이므로 행과 열을 나타내는 2개의 주소를 사용함
> 데이터프레임의 열: 공통의 속성

> 데이터프레임의 행 : 개별 데이터의 모임인 레코드를 나타냄

### pandas의 Series: 인덱스를 가진 1차원 배열
> 넘파이의 1차원 array와 유사

#### 리스트를 인자로 하여 시리즈 객체 생성
<pre><code> data = pd.Series([0.24, 0.5, 0.75, 1.0])</pre></code>

#### 시리즈의 속성: values와 index

<pre><code>data.values</pre></code>

values 값을 확인하면, 값에 해당하는 데이터가 array 형태로 추출

<pre><code>data.index</pre></code>

시리즈 변수의 index 값을 확인하면, index 범위 값만을 얻어낼 수 있음

> Numpy의 배열과 마찬가지로 판다스도 대괄호 표기법을 사용하여 데이터에 접근할 수 있으며,
이때 일반적으로 인덱스와 슬라이싱 방식으로 데이터에 접근

Numpy 배열과 달리 Pandas의 Series에서는 정수가 아닌 명시적으로 정의된 인덱스를 사용하여 요솟값에 접근할 수 있다

> 인덱스로 문자열 사용 가능

<pre><code>data['b']</pre></code>
문자열 인덱스로 항목에 접근 가능

#### 판다스에서 유용하게 사용되는 딕셔너리 구조
> 딕셔너리: 값에 키를 매핑하는 구조

> 판다스의 Series: 기본적으로는 타입이 지정된 키를 타입이 지정된 값으로 매핑하는 구조

판다스 Series는 딕셔너리를 이용하여 생성하는 것이 일반적

##### 딕셔너리(k:v)
딕셔너리의 키인 k는 Series의 인덱스에 대응

딕셔너리의 각 키에 매핑되는 값인 v는 Series의 데이터값으로 변환

딕셔너리로부터 시리즈를 만드는 예

<pre><code>population_dict = {'California': 3554623,'Texas':2312525,'New York': 3423589}
population = pd.series(population_dict )</pre></code>

기본적으로 Series는 해당 키와 매핑되는 값을 불러올 수 있음

but 딕셔너리와 달리 Series는 슬라이싱 형태로 시리즈 내의 데이터 일부를 가져오는 연산도 가능.

#### 시리즈 객체를 구성하는 방법
<pre><code>pd.Series(data, index = index)</pre></code>
index는 옵션이기 때문에 생략이 가능

생략이 되면, 기본값으로 인덱스에 0부터 연속된 정수로 할당

<pre><code>pd.Series([2,4,6])
pd.Series(5, index = [100,200,300])</pre></code>

#### 딕셔너리와 시리즈 객체 비교
딕셔너리는 기본적으로 딕셔너리에 설정된 키를 기반으로 요솟값들을 정렬하여 보여줌

즉 딕셔너리의 출력 시에 키 값으로 정렬되어 출력된다는 것을 확인할 수 있음

그러나 딕셔너리를 입력 인자로 하여 series 객체를 생성하면, 시리즈 객체의 출력 결과는 딕셔너리의 출력과 다름

즉, 화면의 결과와 같이 시리즈 객체는 요솟값들이 입력된 순서대로 출력이 됨

그래서, 시리즈 객체에 요솟값들이 입력된 순서가 아닌 다른 순서나 아예 순서 없이 다른 결과를 얻고 싶으면,
인덱스를 명시적으로 설정하여 원하는 순서로 결과를 얻을 수 있음

<pre><code>pd.Series({2:'a',1:'b',3:'c'}, index[3,2])</pre></code>
3 다음 2를 출력

## Pandas의 또 다른 기본 데이터구조인 DataFrame

### 데이터프레임: 딕셔너리로부터 만들어진 Series 객체 여러 개를 연속적으로 붙여서 구성한 것

Series 객체와 마찬가지로 DataFrame도 인덱스 라벨을 이용하여 요솟값에 접근할 수 있는 index 속성을 갖고 있다.
<pre><code>state.columns</pre></code>
또한, DataFrame은 2차원 배열로 볼 수도 있기 때문에, 열 이름에 대한 라벨을 나타내는 index 객체인 columns 속성도 가지고 있음

## Pandas의 인덱스 객체
Series와 DataFrame 객체에는 인덱스 항목이 포함되어 있다
시리즈와 데이터프레임 객체 내의 데이터를 인덱스를 활용하여 참조하거나 수정할 수 있다.
판다스는 인덱스 용도로 활용할 수 있는 Index 객체를 지원함

정수 리스트로부터 Index 객체를 생성하는 예
<pre><code>ind = pd.Index([2,3,4,5,7,11])</pre></code>

판다스의 Index 객체는 배열처럼 동작

표준 파이썬 인덱싱 표기법을 사용하여 원하는 값이나 슬라이스, 즉 부분 값들을 가져올 수 있음
한편, Index 객체는 화면에서 볼 수 있듯이
1. size
2. shape
3. ndim
4. dtype

등 numpy 배열에서 익숙한 속성을 그대로 가지고 있음

> Index 객체와 NumPy 배열의 한 가지 차이점: Index 객체는 일반적인 방법으로 객체 내의 값이 변경될 수 없는 불변의 값이라는 점입니다.
인덱스 객체의 불변성이라는 특징때문에 인덱스 변경으로 인한 부작용 없이 시리즈나 데이터프레임에서 인덱스를 좀 더 안전하게 사용하고 공유할 수 있다는 점

#### Index의 집합 연산

1. 교집합 : &

2. 합집합 : |

3. 차집합: ^

판다스에서는 2가지 종류의 인덱서를 지원함

> 첫 번째: 인덱스 이름을 기준으로 선택하는 것으로, loc를 사용한 것입니다.

> 두 번째: 정수형 인덱스를 사용한 것으로, iloc를 활용하는 것입니다.

#### loc
탐색대상: 인덱스 이름

범위 지정 가능(끝 포함)

#### iloc

탐색 대상: 정수형 위치 인덱스

범위 지정 가능(끝 제외)

딕셔너리 형태의 구문은 객체를 변경할 때 사용 가능

values 속성을 활용하여 2차원 배열 형태로 출력 가능

### 판다스 객체에 적용되는 산술연산
+ 만일, 시리즈 객체에 어떤 숫자를 더하면, 시리즈의 개별 원소에 각각의 숫자를 더하고 그 결과를 시리즈 객체로 반환하게 됨
이러한 연산은 덧셈 뿐만 아니라 뺄셈, 곱셈, 나눗셈 모두 가능함
시리즈 객체와 시리즈 객체 간에도 산술연산의 적용이 가능

+ 시리즈 객체 간에 연산을 수행할 때, 두 시리즈 객체의 인덱스가 서로 다른 경우에도 산술연산의 적용이 가능
이 경우에는 먼저 동일한 인덱스를 가진 요소를 찾고, 그런 다음 이들 요소끼리 연산을 수행한다.
연산 결과로 인덱스 값으로 정렬된 시리즈 객체를 생성하고 이를 반환하게 된다.

+ 연산자는 add 메소드로, - 연산자는 sub 메소드로, * 연산자는 mul 메소드로, 나누기 연산자는 div 메소드로 매핑하여 사용할 수 있음
그리고 연산 결과로 NaN 값을 갖는 것을 피하기 위해 fill_value 옵션을 각 메소드에서 사용할 수 있음
fill_value 옵션 값으로 0을 주면, NaN 값 대신에 0 값으로 채워지고 연산이 수행됨

### 데이터프레임에 대한 산술연산의 수행

+ 시리즈 객체와 마찬가지로 데이터프레임에 숫자 연산의 적용이 가능
데이터프레임에 임의의 숫자에 대해서 산술연산을 적용하면 데이터프레임의 모든 요소에 해당 숫자에 대해 산술연산을 수행

+ 데이터프레임의 산술연산은 동일한 행과 열 위치에 있는 요소끼리 계산을 수행함
그리고 계산 결과는 원래 위치에 다시 넣어서 데이터프레임을 만들고 반환함
